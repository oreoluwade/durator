{"version":3,"sources":["util/helpers.js","current-time.jsx","App.js","serviceWorker.js","index.js"],"names":["normalizeSegment","input","String","length","getDayString","date","getDay","getMonth","getDaySuffix","day","stringifiedDayNumber","dayLength","startsWith","CurrentTime","useState","dateTime","setDateTime","useEffect","interval","setInterval","today","Date","time","getHours","getMinutes","getSeconds","dayOfWeek","getDate","month","suffix","year","getFullYear","calculateMoment","clearInterval","className","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4JAgBaA,EAAmB,SAAAC,GAE5B,OAAgC,IAAzBC,OAAOD,GAAOE,OAAd,WAAiCF,GAAUA,GAGzCG,EAAe,SAAAC,GAWxB,MAVmB,CACf,SACA,SACA,UACA,YACA,WACA,SACA,YAGcA,EAAKC,WAGdC,EAAW,SAAAF,GAgBpB,MAfwB,CACpB,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAGmBA,EAAKE,aAGnBC,EAAe,SAAAC,GACxB,IACMC,EAAuBR,OAAOO,GAC9BE,EAAYD,EAAqBP,OAuBvC,OArBkB,IAAdQ,GAAsC,IAAnBT,OAAOO,EAAI,IACrB,KACsC,MAAxCC,EAAqBC,EAAY,GAEtB,IAAdA,GAAmBD,EAAqBE,WAAW,KAC7C,KACA,KACqC,MAAxCF,EAAqBC,EAAY,GAEtB,IAAdA,GAAmBD,EAAqBE,WAAW,KAC7C,KACA,KACqC,MAAxCF,EAAqBC,EAAY,GAEtB,IAAdA,GAAmBD,EAAqBE,WAAW,KAC7C,KACA,KAED,MC1EJC,EAAc,WAAO,IAAD,EACGC,mBAAS,MADZ,mBACtBC,EADsB,KACZC,EADY,KAW7B,OARAC,qBAAU,WACN,IAAIC,EAIJ,OAHAA,EAAWC,aAAY,WACnBH,EDTmB,WAC3B,IAAMI,EAAQ,IAAIC,KAKlB,MAAO,CACHC,KALM,UAAMF,EAAMG,WAAZ,YAA0BvB,EAChCoB,EAAMI,cADA,YAELxB,EAAiBoB,EAAMK,eAIxBC,UAAWtB,EAAagB,GACxBX,IAAKW,EAAMO,UACXC,MAAOrB,EAASa,GAChBS,OAAQrB,EAAaY,EAAMO,WAC3BG,KAAMV,EAAMW,eCHIC,MACb,KACI,kBAAMC,cAAcf,MAC5B,IAEIH,EACH,yBAAKmB,UAAU,MACX,uBAAGA,UAAU,YAAYnB,EAASO,MAClC,uBAAGY,UAAU,YACRnB,EAASN,IACTM,EAASc,OAFd,IAEuBd,EAASa,MAFhC,KAEyCb,EAASe,OAGtD,MCXOK,EARH,WACR,OACI,yBAAKD,UAAU,QACX,kBAAC,EAAD,QCMQE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.db4ebd6c.chunk.js","sourcesContent":["export const calculateMoment = () => {\n    const today = new Date();\n    const time = `${today.getHours()}:${normalizeSegment(\n        today.getMinutes()\n    )}:${normalizeSegment(today.getSeconds())}`;\n\n    return {\n        time,\n        dayOfWeek: getDayString(today),\n        day: today.getDate(),\n        month: getMonth(today),\n        suffix: getDaySuffix(today.getDate()),\n        year: today.getFullYear()\n    };\n};\n\nexport const normalizeSegment = input => {\n    // Prepend single digit minute and seconds with zero\n    return String(input).length === 1 ? `0${input}` : input;\n};\n\nexport const getDayString = date => {\n    const daysOfWeek = [\n        'Sunday',\n        'Monday',\n        'Tuesday',\n        'Wednesday',\n        'Thursday',\n        'Friday',\n        'Saturday'\n    ];\n\n    return daysOfWeek[date.getDay()];\n};\n\nexport const getMonth = date => {\n    const monthsOfTheYear = [\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'November',\n        'December'\n    ];\n\n    return monthsOfTheYear[date.getMonth()];\n};\n\nexport const getDaySuffix = day => {\n    let suffix;\n    const stringifiedDayNumber = String(day);\n    const dayLength = stringifiedDayNumber.length;\n\n    if (dayLength === 2 && String(day[0]) === 1) {\n        suffix = 'td';\n    } else if (stringifiedDayNumber[dayLength - 1] === '1') {\n        suffix =\n            dayLength === 2 && stringifiedDayNumber.startsWith('1')\n                ? 'th'\n                : 'st';\n    } else if (stringifiedDayNumber[dayLength - 1] === '2') {\n        suffix =\n            dayLength === 2 && stringifiedDayNumber.startsWith('1')\n                ? 'th'\n                : 'nd';\n    } else if (stringifiedDayNumber[dayLength - 1] === '3') {\n        suffix =\n            dayLength === 2 && stringifiedDayNumber.startsWith('1')\n                ? 'th'\n                : 'rd';\n    } else {\n        suffix = 'th';\n    }\n\n    return suffix;\n};\n","import React, { useState, useEffect } from 'react';\nimport { calculateMoment } from './util/helpers';\n\nexport const CurrentTime = () => {\n    const [dateTime, setDateTime] = useState(null);\n\n    useEffect(() => {\n        let interval = null;\n        interval = setInterval(() => {\n            setDateTime(calculateMoment());\n        }, 1000);\n        return () => clearInterval(interval);\n    }, []);\n\n    return dateTime ? (\n        <div className=\"ct\">\n            <p className=\"ct__time\">{dateTime.time}</p>\n            <p className=\"ct__date\">\n                {dateTime.day}\n                {dateTime.suffix} {dateTime.month}, {dateTime.year}\n            </p>\n        </div>\n    ) : null;\n};\n","import React from 'react';\nimport { CurrentTime } from './current-time';\n\nconst App = () => {\n    return (\n        <div className=\"root\">\n            <CurrentTime />\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}