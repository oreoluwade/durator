{"version":3,"sources":["util/helpers.js","components/current-time.jsx","components/sidebar.jsx","components/home.jsx","util/select-options.js","components/weekday-calculator.jsx","components/date_group/index.jsx","components/dates-duration.jsx","components/App.js","serviceWorker.js","index.js"],"names":["normalizeSegment","input","String","length","getDayString","date","getDay","getMonth","getDaySuffix","day","stringifiedDayNumber","dayLength","startsWith","CurrentTime","useState","dateTime","setDateTime","useEffect","interval","setInterval","today","Date","time","getHours","getMinutes","getSeconds","dayOfWeek","getDate","month","suffix","year","getFullYear","calculateMoment","clearInterval","className","Sidebar","to","Home","path","createFiniteArray","start","stop","step","newArray","i","push","MONTH_OPTIONS","str","num","thirtyOneDayMonths","thirtyDayMonths","calculateDayOptions","includes","getYearOptions","years","y","WeekdayCalculator","setDay","setMonth","setYear","dayOptions","setDayOptions","inputIsValid","setInputIsValid","result","setResult","inputItemsAreValid","every","item","Boolean","console","log","daysInMonth","Number","isNaN","onChange","e","target","value","name","map","key","htmlFor","mo","type","onClick","constructedDate","disabled","DateGroup","groupLabel","optionsData","handleDateChange","index","DatesDuration","days","months","optionsDataOne","setOptionsDataOne","optionsDataTwo","setOptionsDataTwo","startDate","setStartDate","endDate","setEndDate","setDisabled","timeDifference","setTimeDifference","allTargetsFilled","getUTCTime","a","UTC","obj","Object","values","preventDefault","startDateObject","endDateObject","epoch","daysAfterExtractingYears","Math","abs","monthsInRemainingDays","floor","daysRemaining","App","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a91b9481.chunk.js","sourcesContent":["export const calculateMoment = () => {\n    const today = new Date();\n    const time = `${today.getHours()}:${normalizeSegment(\n        today.getMinutes()\n    )}:${normalizeSegment(today.getSeconds())}`;\n\n    return {\n        time,\n        dayOfWeek: getDayString(today),\n        day: today.getDate(),\n        month: getMonth(today),\n        suffix: getDaySuffix(today.getDate()),\n        year: today.getFullYear()\n    };\n};\n\nexport const normalizeSegment = input => {\n    // Prepend single digit minute and seconds with zero\n    return String(input).length === 1 ? `0${input}` : input;\n};\n\nexport const getDayString = date => {\n    const daysOfWeek = [\n        'Sunday',\n        'Monday',\n        'Tuesday',\n        'Wednesday',\n        'Thursday',\n        'Friday',\n        'Saturday'\n    ];\n\n    return daysOfWeek[date.getDay()];\n};\n\nexport const getMonth = date => {\n    const monthsOfTheYear = [\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'November',\n        'December'\n    ];\n\n    return monthsOfTheYear[date.getMonth()];\n};\n\nexport const getDaySuffix = day => {\n    let suffix;\n    const stringifiedDayNumber = String(day);\n    const dayLength = stringifiedDayNumber.length;\n\n    if (dayLength === 2 && String(day[0]) === 1) {\n        suffix = 'td';\n    } else if (stringifiedDayNumber[dayLength - 1] === '1') {\n        suffix =\n            dayLength === 2 && stringifiedDayNumber.startsWith('1')\n                ? 'th'\n                : 'st';\n    } else if (stringifiedDayNumber[dayLength - 1] === '2') {\n        suffix =\n            dayLength === 2 && stringifiedDayNumber.startsWith('1')\n                ? 'th'\n                : 'nd';\n    } else if (stringifiedDayNumber[dayLength - 1] === '3') {\n        suffix =\n            dayLength === 2 && stringifiedDayNumber.startsWith('1')\n                ? 'th'\n                : 'rd';\n    } else {\n        suffix = 'th';\n    }\n\n    return suffix;\n};\n","import React, { useState, useEffect, Fragment } from 'react';\nimport { calculateMoment } from '../util/helpers';\n\nexport const CurrentTime = () => {\n  const [dateTime, setDateTime] = useState(null);\n\n  useEffect(() => {\n    let interval = null;\n    interval = setInterval(() => {\n      setDateTime(calculateMoment());\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"ct\">\n      {dateTime && (\n        <Fragment>\n          <p className=\"ct__time\">{dateTime.time}</p>\n          <p className=\"ct__date\">\n            {dateTime.day}\n            {dateTime.suffix} {dateTime.month}, {dateTime.year}\n          </p>\n          <p className=\"ct__weekday\">{dateTime.dayOfWeek}</p>\n        </Fragment>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { Link } from '@reach/router';\n\nconst Sidebar = () => {\n    return (\n        <aside className=\"sb\">\n            <Link to=\"/weekday-calculator\" className=\"button sb__wd\">\n                What day of the week was I born?\n            </Link>\n            <Link to=\"/dates-duration\" className=\"button sb__wd\">\n                Get duration between dates\n            </Link>\n        </aside>\n    );\n};\n\nexport default Sidebar;\n","import React from 'react';\nimport { CurrentTime } from './current-time';\nimport Sidebar from './sidebar';\n\nconst Home = () => {\n  return (\n    <div className=\"root\" path=\"/\">\n      <CurrentTime />\n      <Sidebar />\n    </div>\n  );\n};\n\nexport default Home;\n","const createFiniteArray = (start, stop, step) => {\n    const newArray = [];\n    for (let i = start; i <= stop; i += step) {\n        newArray.push(i);\n    }\n    return newArray;\n};\n\nexport const MONTH_OPTIONS = [\n    { str: 'January', num: '01' },\n    { str: 'February', num: '02' },\n    { str: 'March', num: '03' },\n    { str: 'April', num: '04' },\n    { str: 'May', num: '05' },\n    { str: 'June', num: '06' },\n    { str: 'July', num: '07' },\n    { str: 'August', num: '08' },\n    { str: 'September', num: '09' },\n    { str: 'October', num: '10' },\n    { str: 'November', num: '11' },\n    { str: 'December', num: '12' }\n];\n\nconst thirtyOneDayMonths = [\n    'January',\n    'March',\n    'May',\n    'July',\n    'August',\n    'October',\n    'December'\n];\n\nconst thirtyDayMonths = ['April', 'June', 'September', 'November'];\n\nexport const calculateDayOptions = (month, year) => {\n    if (month === '' && year === '') {\n        return createFiniteArray(1, 31, 1);\n    } else if (thirtyOneDayMonths.includes(month)) {\n        return createFiniteArray(1, 31, 1);\n    } else if (thirtyDayMonths.includes(month)) {\n        return createFiniteArray(1, 30, 1);\n    } else {\n        if (year % 4 === 0) {\n            return createFiniteArray(1, 29, 1);\n        } else {\n            return createFiniteArray(1, 28, 1);\n        }\n    }\n};\n\nexport const getYearOptions = () => {\n    let years = [];\n    for (let y = 1; y <= 120; y += 1) {\n        years.push(new Date().getFullYear() - y + 1);\n    }\n\n    return years;\n};\n","import React, { useState, useEffect } from 'react';\nimport {\n    MONTH_OPTIONS,\n    calculateDayOptions,\n    getYearOptions\n} from '../util/select-options';\nimport { getDayString } from '../util/helpers';\n\nconst WeekdayCalculator = () => {\n    const [day, setDay] = useState('Select a day');\n    const [month, setMonth] = useState('');\n    const [year, setYear] = useState('');\n    const [dayOptions, setDayOptions] = useState([]);\n    const [inputIsValid, setInputIsValid] = useState(false);\n    const [result, setResult] = useState(null);\n\n    useEffect(() => {\n        const inputItems = [day, month, year];\n        const inputItemsAreValid = inputItems.every(item => Boolean(item));\n\n        setInputIsValid(inputItemsAreValid);\n    }, [day, month, year]);\n\n    useEffect(() => {\n        setDayOptions(calculateDayOptions(month, year));\n        console.log('Everytime', daysInMonth(month, year), Number(day));\n\n        if (daysInMonth(month, year) < Number(day)) {\n            setDay(String(daysInMonth(month, year)));\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [month, year]);\n\n    const daysInMonth = (month, year) => {\n        return new Date(year, month, 0).getDate();\n    };\n\n    const handleDayChange = e => {\n        setDay(e.target.value);\n    };\n\n    const handleMonthChange = e => {\n        setMonth(e.target.value);\n    };\n\n    const handleYearChange = e => {\n        setYear(e.target.value);\n    };\n\n    const getDayOfWeek = () => {\n        const constructedDate = new Date(`${year}-${month}-${day}`);\n\n        setResult(getDayString(constructedDate));\n    };\n\n    return (\n        <div className=\"wd\">\n            <p>Enter your birth date below</p>\n            <form className=\"wd-date-group\">\n                <div className=\"wd-field\">\n                    <div className=\"wd-field-select\">\n                        <select\n                            className={\n                                isNaN(Number(day))\n                                    ? 'wd-selector wd-selector__disabled'\n                                    : 'wd-selector'\n                            }\n                            onChange={handleDayChange}\n                            name=\"day\"\n                        >\n                            <option value={day} className=\"wd-option\">\n                                {day}\n                            </option>\n                            {dayOptions.map(item => (\n                                <option\n                                    value={item}\n                                    key={item}\n                                    className=\"wd-option\"\n                                >\n                                    {item}\n                                </option>\n                            ))}\n                        </select>\n                    </div>\n                    <label htmlFor=\"day\">Day</label>\n                </div>\n\n                <div className=\"wd-field\">\n                    <div className=\"wd-field-select\">\n                        <select\n                            className={\n                                !month\n                                    ? 'wd-selector wd-selector__disabled'\n                                    : 'wd-selector'\n                            }\n                            onChange={handleMonthChange}\n                            name=\"month\"\n                        >\n                            <option value=\"\" className=\"wd-option\">\n                                Select a month\n                            </option>\n                            {MONTH_OPTIONS.map(mo => (\n                                <option\n                                    value={mo.num}\n                                    key={mo.str}\n                                    className=\"wd-option\"\n                                >\n                                    {mo.str}\n                                </option>\n                            ))}\n                        </select>\n                    </div>\n                    <label htmlFor=\"month\">Month</label>\n                </div>\n                <div className=\"wd-field\">\n                    <div className=\"wd-field-select\">\n                        <select\n                            className={\n                                !year\n                                    ? 'wd-selector wd-selector__disabled'\n                                    : 'wd-selector'\n                            }\n                            onChange={handleYearChange}\n                            name=\"year\"\n                        >\n                            <option value=\"\" className=\"wd-option\">\n                                Select a year\n                            </option>\n                            {getYearOptions().map(year => (\n                                <option\n                                    value={year}\n                                    key={year}\n                                    className=\"wd-option\"\n                                >\n                                    {year}\n                                </option>\n                            ))}\n                        </select>\n                    </div>\n                    <label htmlFor=\"year\">Year</label>\n                </div>\n\n                <button\n                    type=\"button\"\n                    className=\"wd-submit\"\n                    onClick={getDayOfWeek}\n                    disabled={!inputIsValid}\n                >\n                    SUBMIT\n                </button>\n            </form>\n\n            {result && (\n                <h1 className=\"wd-result\">\n                    You were born on a{' '}\n                    <span className=\"wd-result_calculated\">{result}</span>\n                </h1>\n            )}\n        </div>\n    );\n};\n\nexport default WeekdayCalculator;\n","import React from 'react';\nimport './date-group.scss';\n\nconst DateGroup = ({ groupLabel, optionsData, handleDateChange }) => {\n    return (\n        <form className=\"dg-root\">\n            <fieldset>\n                <legend className=\"dg-label\">{groupLabel}</legend>\n                <div className=\"dg-select_group\">\n                    <label className=\"dg-select_label\">\n                        <select\n                            className=\"dg-select\"\n                            onChange={handleDateChange}\n                            name=\"day\"\n                        >\n                            <option value=\"\">Select day</option>\n                            {optionsData['days'].map((day, index) => (\n                                <option value={day} key={index}>\n                                    {day}\n                                </option>\n                            ))}\n                        </select>\n                    </label>\n                    <div className=\"dg-divider\" />\n\n                    <label className=\"dg-select_label\">\n                        <select\n                            className=\"dg-select\"\n                            onChange={handleDateChange}\n                            name=\"month\"\n                        >\n                            <option value=\"\">Select month</option>\n                            {optionsData['months'].map(month => (\n                                <option value={month.num} key={month.str}>\n                                    {month.str}\n                                </option>\n                            ))}\n                        </select>\n                    </label>\n                    <div className=\"dg-divider\" />\n\n                    <label className=\"dg-select_label\">\n                        <select\n                            className=\"dg-select\"\n                            onChange={handleDateChange}\n                            name=\"year\"\n                        >\n                            <option value=\"\">Select year</option>\n                            {optionsData['years'].map((year, index) => (\n                                <option value={year} key={index}>\n                                    {year}\n                                </option>\n                            ))}\n                        </select>\n                    </label>\n                </div>\n            </fieldset>\n        </form>\n    );\n};\n\nexport default DateGroup;\n","import React, { useState, useEffect } from 'react'; // useState\nimport {\n    MONTH_OPTIONS,\n    calculateDayOptions,\n    getYearOptions\n} from '../util/select-options';\nimport DateGroup from './date_group';\n\nconst MILLISECONDS_PER_DAY = 1000 * 60 * 60 * 24;\n\nconst DatesDuration = () => {\n    const [optionsDataOne, setOptionsDataOne] = useState({\n        days: [],\n        months: [],\n        years: []\n    });\n\n    const [optionsDataTwo, setOptionsDataTwo] = useState({\n        days: [],\n        months: [],\n        years: []\n    });\n\n    const [startDate, setStartDate] = useState({\n        day: '',\n        month: '',\n        year: ''\n    });\n    const [endDate, setEndDate] = useState({ day: '', month: '', year: '' });\n    const [disabled, setDisabled] = useState(true);\n    const [timeDifference, setTimeDifference] = useState('');\n\n    useEffect(() => {\n        setOptionsDataOne({\n            days: calculateDayOptions('', ''),\n            months: MONTH_OPTIONS,\n            years: getYearOptions()\n        });\n        setOptionsDataTwo({\n            days: calculateDayOptions('', ''),\n            months: MONTH_OPTIONS,\n            years: getYearOptions()\n        });\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        if (allTargetsFilled(startDate) && allTargetsFilled(endDate)) {\n            setDisabled(false);\n        }\n    }, [startDate, endDate]);\n\n    const handleStartDateChange = e => {\n        setTimeDifference('');\n        setStartDate({ ...startDate, [e.target.name]: e.target.value });\n    };\n\n    const handleEndDateChange = e => {\n        setTimeDifference('');\n        setEndDate({ ...endDate, [e.target.name]: e.target.value });\n    };\n\n    const getUTCTime = a => {\n        // a is Date object\n        return Date.UTC(a.getFullYear(), a.getMonth(), a.getDate());\n    };\n\n    const getDuration = e => {\n        e.preventDefault();\n        const startDateObject = new Date(\n            `${startDate.year}-${startDate.month}-${startDate.day}`\n        );\n        const endDateObject = new Date(\n            `${endDate.year}-${endDate.month}-${endDate.day}`\n        );\n\n        const utc1 = getUTCTime(startDateObject);\n        const utc2 = getUTCTime(endDateObject);\n\n        const epoch = (utc1 - utc2) / MILLISECONDS_PER_DAY;\n\n        const daysAfterExtractingYears = Math.abs(epoch % 365);\n\n        if (Math.abs(epoch / 365) > 1) {\n            if (daysAfterExtractingYears < 30) {\n                const monthsInRemainingDays = Math.abs(\n                    Math.floor(daysAfterExtractingYears / 30)\n                );\n                const daysRemaining = daysAfterExtractingYears % 30;\n                setTimeDifference(\n                    `${Math.floor(\n                        Math.abs(epoch / 365)\n                    )} years, ${monthsInRemainingDays} months, ${daysRemaining} days`\n                );\n            } else {\n                setTimeDifference(\n                    `${Math.floor(\n                        Math.abs(epoch / 365)\n                    )} months, ${daysAfterExtractingYears} days`\n                );\n            }\n        } else {\n            if (daysAfterExtractingYears > 30) {\n                const monthsInRemainingDays = Math.abs(\n                    Math.floor(daysAfterExtractingYears / 30)\n                );\n                const daysRemaining = daysAfterExtractingYears % 30;\n                setTimeDifference(\n                    `${monthsInRemainingDays} months, ${daysRemaining} days`\n                );\n            } else {\n                setTimeDifference(`${Math.floor(Math.abs(epoch))} days`);\n            }\n        }\n    };\n\n    const allTargetsFilled = obj => {\n        return Object.values(obj).every(item => Boolean(item));\n    };\n\n    return (\n        <div className=\"dd-root\">\n            <button\n                onClick={getDuration}\n                type=\"button\"\n                className=\"dd-submit\"\n                disabled={disabled}\n            >\n                Calculate Duration\n            </button>\n            <div className=\"dd-dates\">\n                <DateGroup\n                    groupLabel=\"Start Date\"\n                    optionsData={optionsDataOne}\n                    handleDateChange={handleStartDateChange}\n                />\n                <div className=\"dd-epoch_divider\" />\n                <DateGroup\n                    groupLabel=\"End Date\"\n                    optionsData={optionsDataTwo}\n                    handleDateChange={handleEndDateChange}\n                />\n            </div>\n            {timeDifference && <h1>{timeDifference}</h1>}\n        </div>\n    );\n};\n\nexport default DatesDuration;\n","import React from 'react';\nimport { Router } from '@reach/router';\nimport Home from './home';\nimport WeekdayCalculator from './weekday-calculator';\nimport DatesDuration from './dates-duration';\n\nconst App = () => {\n    return (\n        <Router>\n            <Home path=\"/\" />\n            <WeekdayCalculator path=\"/weekday-calculator\" />\n            <DatesDuration path=\"/dates-duration\" />\n        </Router>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}